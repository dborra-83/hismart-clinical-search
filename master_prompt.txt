# HISmart - Master Prompt para Claude Code

## Contexto del Proyecto

HISmart es una aplicaci√≥n web serverless marca blanca para hospitales que permite a profesionales m√©dicos buscar y analizar notas cl√≠nicas de manera inteligente utilizando IA. El sistema est√° completamente construido en AWS usando arquitectura serverless y mejores pr√°cticas de la nube.

## Arquitectura T√©cnica

### Stack Tecnol√≥gico
- **Frontend**: React 18 + TypeScript + Material-UI + AWS Amplify
- **Backend**: AWS Lambda (Node.js 18) + API Gateway + DynamoDB
- **IA**: Amazon Bedrock (Claude 3 Sonnet)
- **Autenticaci√≥n**: Amazon Cognito + MFA
- **Almacenamiento**: Amazon S3
- **IaC**: AWS CDK (TypeScript)
- **Idioma**: Espa√±ol (interfaz completamente localizada)

### Componentes Principales

1. **Infrastructure Stack** (`infrastructure/lib/`)
   - `hismart-infrastructure-stack.ts`: DynamoDB + S3 buckets
   - `hismart-cognito-stack.ts`: User pools + grupos + MFA
   - `hismart-backend-stack.ts`: Lambdas + API Gateway
   - `hismart-frontend-stack.ts`: S3 + CloudFront para hosting

2. **Backend Lambdas** (`backend/`)
   - `csv-parser/`: Procesamiento de archivos CSV con validaci√≥n
   - `crud-api/`: CRUD completo + b√∫squeda + presigned URLs
   - `ai-analysis/`: Integraci√≥n Bedrock para 4 tipos de an√°lisis IA

3. **Frontend React** (`frontend/src/`)
   - `pages/`: 6 p√°ginas principales (Dashboard, Search, Upload, Notes, Analysis, Settings)
   - `contexts/`: Auth + Branding para white-label
   - `services/api.ts`: Capa de servicios con manejo de errores
   - `hooks/useApi.ts`: Hooks personalizados con React Query

## Caracter√≠sticas Implementadas

### ‚úÖ Sistema White-Label Completo
- Colores personalizables por instituci√≥n
- Logo personalizable
- Textos configurables
- Branding din√°mico con BrandingContext

### ‚úÖ Autenticaci√≥n Robusta
- Amazon Cognito con grupos (Administradores, M√©dicos, Enfermer√≠a)
- MFA obligatorio configurado
- JWT tokens con manejo seguro
- Rutas protegidas por rol

### ‚úÖ Procesamiento de Datos M√©dicos
- Parser CSV flexible para diferentes formatos hospitalarios
- Validaci√≥n de datos m√©dicos
- Detecci√≥n de duplicados
- Mapeo autom√°tico de columnas

### ‚úÖ B√∫squeda Inteligente
- B√∫squeda de texto completo
- Filtros por especialidad, m√©dico, fechas
- Puntuaci√≥n de relevancia
- Resultados paginados con preview

### ‚úÖ An√°lisis IA con Bedrock
- **An√°lisis Completo**: Evaluaci√≥n exhaustiva de notas
- **Resumen Ejecutivo**: S√≠ntesis concisa configurable
- **Evaluaci√≥n de Riesgos**: An√°lisis de factores de riesgo
- **Extracci√≥n Estructurada**: Datos en formato JSON

### ‚úÖ Dashboard M√©dico
- M√©tricas en tiempo real
- Gr√°ficos por especialidad
- Top m√©dicos m√°s activos
- Estad√≠sticas de uso

### ‚úÖ Carga de Archivos
- Drag & drop para CSV
- Progreso en tiempo real
- Validaci√≥n de formato
- Estados de procesamiento

### ‚úÖ Interfaz Responsive
- Mobile-first design
- Material-UI components
- Sidebar colapsable
- Optimizado para tablets m√©dicas

## Flujos de Trabajo Principales

### 1. Carga de Datos Cl√≠nicos
```
Usuario sube CSV ‚Üí Validaci√≥n formato ‚Üí S3 upload ‚Üí Lambda parser ‚Üí 
Procesamiento ‚Üí DynamoDB ‚Üí Notificaci√≥n de estado
```

### 2. B√∫squeda y An√°lisis
```
Query de b√∫squeda ‚Üí Filtros aplicados ‚Üí DynamoDB scan/query ‚Üí 
Resultados con relevancia ‚Üí An√°lisis IA opcional ‚Üí Visualizaci√≥n
```

### 3. An√°lisis con IA
```
Selecci√≥n de contenido ‚Üí Tipo de an√°lisis ‚Üí Bedrock Claude ‚Üí 
Procesamiento ‚Üí Resultado estructurado ‚Üí Cache + Historial
```

## Estructura de Archivos Clave

### Configuraci√≥n de Infraestructura
- `infrastructure/bin/hismart.ts`: Entry point CDK
- `infrastructure/cdk.json`: Configuraci√≥n CDK
- `deploy-dev.sh`: Script de despliegue completo

### Backend Cr√≠tico
- `backend/crud-api/index.js`: API principal con 15+ endpoints
- `backend/ai-analysis/index.js`: Integraci√≥n Bedrock completa
- `backend/csv-parser/index.js`: Parser flexible con validaci√≥n

### Frontend Esencial
- `frontend/src/App.tsx`: Routing + auth guards
- `frontend/src/contexts/AuthContext.tsx`: Gesti√≥n de autenticaci√≥n
- `frontend/src/contexts/BrandingContext.tsx`: White-label system
- `frontend/src/services/api.ts`: 20+ funciones API con error handling

## Seguridad Implementada

- ‚úÖ Autenticaci√≥n JWT con Cognito
- ‚úÖ Roles y permisos granulares
- ‚úÖ Sanitizaci√≥n de inputs
- ‚úÖ HTTPS obligatorio
- ‚úÖ CORS configurado espec√≠ficamente
- ‚úÖ No exposici√≥n de tokens en logs
- ‚úÖ Validaci√≥n de permisos por endpoint
- ‚úÖ MFA obligatorio para usuarios m√©dicos

## Base de Datos (DynamoDB)

### Tabla Principal: `clinical-notes-dev`
```
Partition Key: id (string)
Attributes:
- paciente_id, fecha_nota, medico, especialidad
- tipo_nota, diagnosticos[], medicamentos[]
- contenido_original, contenido_procesado
- palabras_clave[], resumen_ia, analisis_ia_completo
- estado, fecha_carga, usuario_creacion
```

### √çndices Secundarios:
- `paciente-index`: Por paciente_id
- `medico-especialidad-index`: Por m√©dico y especialidad
- `fecha-index`: Por fecha de nota

## APIs Implementadas

### CRUD Endpoints
- `GET /notes` - Lista con filtros y paginaci√≥n
- `GET /notes/{id}` - Nota espec√≠fica
- `POST /notes` - Crear nueva nota
- `PUT /notes/{id}` - Actualizar nota
- `DELETE /notes/{id}` - Eliminar (solo admin)

### B√∫squeda y An√°lisis
- `POST /search` - B√∫squeda avanzada
- `POST /analyze/note` - An√°lisis completo
- `POST /analyze/summary` - Resumen ejecutivo
- `POST /analyze/risk` - Evaluaci√≥n de riesgos
- `POST /analyze/extract` - Extracci√≥n estructurada

### Utilidades
- `POST /upload/csv` - Generar presigned URL
- `GET /upload/status/{jobId}` - Estado de procesamiento
- `GET /stats/dashboard` - M√©tricas para dashboard

## Despliegue y DevOps

### Ambientes Configurados
- **Development**: Configuraci√≥n completa para pruebas
- **Production**: Optimizado para alta disponibilidad

### Script de Despliegue (`deploy-dev.sh`)
1. Verificaci√≥n de prerrequisitos (AWS CLI, Node.js)
2. Bootstrap CDK si es necesario
3. Despliegue de infraestructura (4 stacks)
4. Build y despliegue de frontend
5. Creaci√≥n de usuarios de prueba
6. Configuraci√≥n completa del ambiente

### Usuarios de Prueba Configurados
- **admin** / TempPass123! (Administrador)
- **medico1** / TempPass123! (Dr. Juan P√©rez - Cardiolog√≠a)

## Personalizaci√≥n White-Label

### Configuraci√≥n de Branding
```json
{
  "nombre": "HISmart Hospital XYZ",
  "logo": "/branding/logo.png",
  "colores": {
    "primario": "#1565C0",
    "secundario": "#42A5F5",
    "fondo": "#F4F6F8"
  },
  "textos": {
    "bienvenida": "Bienvenido al sistema HISmart",
    "descripcion": "B√∫squeda inteligente de notas cl√≠nicas"
  }
}
```

## Instrucciones para Claude Code

### Al trabajar con este proyecto:

1. **Mantener Arquitectura Serverless**: Todo debe ejecutarse en Lambda/managed services
2. **Preservar Idioma Espa√±ol**: Toda la UI debe permanecer en espa√±ol
3. **Respetar White-Label**: Mantener sistema de branding personalizable
4. **Seguir Patrones Establecidos**: Usar hooks/contexts existentes
5. **Validar Seguridad**: Verificar permisos en todos los cambios
6. **Documentar Cambios**: Actualizar README correspondiente

### Comandos de Desarrollo Frecuentes:
```bash
# Despliegue completo development
./deploy-dev.sh

# Solo infraestructura
cd infrastructure && npx cdk deploy --all

# Solo frontend
cd frontend && npm run build && aws s3 sync build/ s3://bucket-name

# Desarrollo local frontend
cd frontend && npm start
```

### Archivos No Modificar:
- `deploy-dev.sh` - Script de despliegue funcional
- `aws-config.ts` - Configuraci√≥n de Amplify
- `BrandingContext.tsx` - Sistema white-label core

### Archivos Frecuentemente Editados:
- `frontend/src/pages/*.tsx` - P√°ginas de la aplicaci√≥n
- `backend/*/index.js` - L√≥gica de Lambdas
- `infrastructure/lib/*.ts` - Configuraci√≥n de infraestructura

## Estado Actual del Proyecto

### ‚úÖ Completado
- Infraestructura completa desplegable
- Backend funcional con 3 Lambdas
- Frontend completo en espa√±ol
- Autenticaci√≥n con Cognito
- An√°lisis IA con Bedrock
- Sistema white-label
- Documentaci√≥n t√©cnica

### üîÑ Listo para Despliegue
- Script `deploy-dev.sh` probado
- Usuarios de prueba configurados
- Todas las funcionalidades implementadas
- Seguridad configurada

### üìã Pr√≥ximos Pasos Sugeridos
1. Ejecutar `./deploy-dev.sh` para despliegue inicial
2. Probar funcionalidades con usuarios de prueba
3. Cargar datos CSV de ejemplo
4. Validar an√°lisis IA en ambiente real
5. Personalizar branding seg√∫n instituci√≥n

## Notas de Desarrollo

- **Modelo IA**: Configurado para Claude 3 Sonnet (actualizable a Claude 4)
- **Regiones AWS**: Optimizado para us-east-1 (configurable)
- **Costos**: Estimado $20-50/mes para ambiente dev peque√±o
- **Escalabilidad**: Arquitectura serverless auto-escalable
- **Compliance**: Preparado para HIPAA (requiere configuraci√≥n adicional)

## Casos de Uso Implementados

1. **Hospital Regional**: B√∫squeda de notas por especialidad
2. **Cl√≠nica Privada**: An√°lisis de riesgo de pacientes
3. **Centro M√©dico**: Dashboard de m√©tricas por m√©dico
4. **Consulta Externa**: Res√∫menes ejecutivos para referencias
5. **Administraci√≥n**: Reportes y estad√≠sticas de uso

Este proyecto est√° completamente funcional y listo para despliegue en ambiente de desarrollo. Todas las funcionalidades core est√°n implementadas y probadas localmente.

---

## PROMPTS DE IA PARA AN√ÅLISIS CL√çNICO

### Prompt Base para An√°lisis Completo:
```
Analiza la siguiente nota cl√≠nica de manera exhaustiva:

{contenido}

Proporciona:
1. Resumen de los hallazgos principales
2. Diagn√≥sticos mencionados o sugeridos
3. Medicamentos y tratamientos identificados
4. Estado del paciente
5. Plan de seguimiento
6. Cualquier √°rea que requiera atenci√≥n especial

Responde en espa√±ol de manera profesional y estructurada.
```

### Prompt para Resumen Ejecutivo:
```
Genera un resumen ejecutivo de m√°ximo {max_palabras} palabras de la siguiente nota cl√≠nica:

{contenido}

El resumen debe incluir:
- Diagn√≥stico principal
- Estado actual del paciente
- Tratamiento prescrito
- Pr√≥ximos pasos

Mant√©n un lenguaje m√©dico profesional en espa√±ol.
```

### Prompt para Evaluaci√≥n de Riesgos:
```
Eval√∫a el nivel de riesgo del paciente basado en la siguiente nota cl√≠nica:

{contenido}

Factores adicionales a considerar: {factores_adicionales}

Proporciona:
1. Nivel de riesgo (Bajo/Medio/Alto/Cr√≠tico)
2. Factores de riesgo identificados
3. Recomendaciones para mitigar riesgos
4. Signos de alerta a monitorear

Responde de manera estructurada en espa√±ol.
```

### Prompt para Extracci√≥n de Datos:
```
Extrae informaci√≥n estructurada de la siguiente nota cl√≠nica en formato JSON:

{contenido}

Extrae:
- datos_demograficos: {edad, genero, etc}
- signos_vitales: {presion_arterial, temperatura, etc}
- medicamentos: [{nombre, dosis, frecuencia}]
- diagnosticos: [lista de diagn√≥sticos]
- fechas_importantes: [fechas relevantes]
- examenes_solicitados: [lista de ex√°menes]

Responde solo con el JSON v√°lido, sin texto adicional.
```

---

## CONFIGURACI√ìN AWS

### Variables de Entorno Utilizadas:
```bash
# AWS Configuration
AWS_REGION=us-east-1
ENVIRONMENT=dev

# S3 Buckets (generados por CDK)
CLINICAL_DATA_BUCKET=hismart-clinical-data-dev-xxxxx
WEBSITE_BUCKET=hismart-website-dev-xxxxx

# DynamoDB (generado por CDK)
CLINICAL_NOTES_TABLE_NAME=clinical-notes-dev

# Cognito (generado por CDK)
USER_POOL_ID=us-east-1_xxxxxxxxx
USER_POOL_CLIENT_ID=xxxxxxxxxxxxxxxxxxxx

# Bedrock Configuration
BEDROCK_REGION=us-east-1
MODEL_ID=anthropic.claude-3-sonnet-20240229-v1:0

# API Gateway (generado por CDK)
API_GATEWAY_URL=https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev
```

### Estructura CSV Soportada:
```
ID_Paciente,Fecha_Nota,Medico,Especialidad,Tipo_Consulta,Contenido_Nota,Diagnosticos,Medicamentos
12345,2024-01-15,Dr. Juan P√©rez,Cardiolog√≠a,consulta_externa,"Paciente presenta...",Hipertensi√≥n;Diabetes,"Losart√°n 50mg;Metformina 850mg"
```

**Columnas soportadas (flexibles):**
- **ID_Paciente:** id_paciente, paciente_id, patient_id, id, id_pac
- **Fecha_Nota:** fecha_nota, fecha, date, fecha_consulta, fecha_atencion
- **Medico:** medico, doctor, physician, m√©dico, profesional
- **Especialidad:** especialidad, specialty, area
- **Tipo_Consulta:** tipo_consulta, tipo, type, modalidad
- **Contenido_Nota:** contenido_nota, nota, note, content, observaciones
- **Diagnosticos:** diagnosticos, diagnosis, dx (separados por ; , |)
- **Medicamentos:** medicamentos, medications, drugs, tratamiento (separados por ; , |)

### Flujo de procesamiento CSV:
1. **Trigger:** Archivo CSV subido a S3 ‚Üí EventBridge ‚Üí Lambda
2. **Validaci√≥n:** Verificar formato CSV y estructura
3. **Parsing:** Usar csv-parser para extraer datos fila por fila
4. **Mapeo flexible:** Detectar columnas autom√°ticamente
5. **Limpieza:** Normalizar texto y remover caracteres especiales
6. **Deduplicaci√≥n:** Verificar duplicados por ID_Paciente + Fecha_Nota
7. **Enriquecimiento:** Generar palabras clave y resumen con IA
8. **Almacenamiento:** Guardar en DynamoDB
9. **Indexaci√≥n:** Crear √≠ndices para b√∫squeda r√°pida

---

*√öltima actualizaci√≥n: Enero 2025*
*Proyecto completamente funcional y listo para despliegue*